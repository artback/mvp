// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artback/mvp/pkg/users (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	users "github.com/artback/mvp/pkg/users"
	gomock "github.com/golang/mock/gomock"
)

// UserService is a mock of Service interface.
type UserService struct {
	ctrl     *gomock.Controller
	recorder *UserServiceMockRecorder
}

// UserServiceMockRecorder is the mock recorder for UserService.
type UserServiceMockRecorder struct {
	mock *UserService
}

// NewUserService creates a new mock instance.
func NewUserService(ctrl *gomock.Controller) *UserService {
	mock := &UserService{ctrl: ctrl}
	mock.recorder = &UserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserService) EXPECT() *UserServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *UserService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *UserServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*UserService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *UserService) Get(arg0 context.Context, arg1 string) (*users.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*users.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *UserServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*UserService)(nil).Get), arg0, arg1)
}

// GetResponse mocks base method.
func (m *UserService) GetResponse(arg0 context.Context, arg1 string) (*users.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponse", arg0, arg1)
	ret0, _ := ret[0].(*users.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponse indicates an expected call of GetResponse.
func (mr *UserServiceMockRecorder) GetResponse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*UserService)(nil).GetResponse), arg0, arg1)
}

// Insert mocks base method.
func (m *UserService) Insert(arg0 context.Context, arg1 users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *UserServiceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*UserService)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *UserService) Update(arg0 context.Context, arg1 users.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *UserServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*UserService)(nil).Update), arg0, arg1)
}
