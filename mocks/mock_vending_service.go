// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artback/mvp/pkg/vending (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	products "github.com/artback/mvp/pkg/products"
	vending "github.com/artback/mvp/pkg/vending"
	gomock "github.com/golang/mock/gomock"
)

// VendingService is a mock of Service interface.
type VendingService struct {
	ctrl     *gomock.Controller
	recorder *VendingServiceMockRecorder
}

// VendingServiceMockRecorder is the mock recorder for VendingService.
type VendingServiceMockRecorder struct {
	mock *VendingService
}

// NewVendingService creates a new mock instance.
func NewVendingService(ctrl *gomock.Controller) *VendingService {
	mock := &VendingService{ctrl: ctrl}
	mock.recorder = &VendingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *VendingService) EXPECT() *VendingServiceMockRecorder {
	return m.recorder
}

// BuyProduct mocks base method.
func (m *VendingService) BuyProduct(arg0 context.Context, arg1 string, arg2 products.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyProduct indicates an expected call of BuyProduct.
func (mr *VendingServiceMockRecorder) BuyProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProduct", reflect.TypeOf((*VendingService)(nil).BuyProduct), arg0, arg1, arg2)
}

// GetAccount mocks base method.
func (m *VendingService) GetAccount(arg0 context.Context, arg1 string) (*vending.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*vending.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *VendingServiceMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*VendingService)(nil).GetAccount), arg0, arg1)
}

// IncrementDeposit mocks base method.
func (m *VendingService) IncrementDeposit(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementDeposit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementDeposit indicates an expected call of IncrementDeposit.
func (mr *VendingServiceMockRecorder) IncrementDeposit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementDeposit", reflect.TypeOf((*VendingService)(nil).IncrementDeposit), arg0, arg1, arg2)
}

// SetDeposit mocks base method.
func (m *VendingService) SetDeposit(arg0 context.Context, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeposit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeposit indicates an expected call of SetDeposit.
func (mr *VendingServiceMockRecorder) SetDeposit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeposit", reflect.TypeOf((*VendingService)(nil).SetDeposit), arg0, arg1, arg2)
}
