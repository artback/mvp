// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artback/mvp/pkg/products (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	products "github.com/artback/mvp/pkg/products"
	gomock "github.com/golang/mock/gomock"
)

// ProductService is a mock of Service interface.
type ProductService struct {
	ctrl     *gomock.Controller
	recorder *ProductServiceMockRecorder
}

// ProductServiceMockRecorder is the mock recorder for ProductService.
type ProductServiceMockRecorder struct {
	mock *ProductService
}

// NewProductService creates a new mock instance.
func NewProductService(ctrl *gomock.Controller) *ProductService {
	mock := &ProductService{ctrl: ctrl}
	mock.recorder = &ProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProductService) EXPECT() *ProductServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *ProductService) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProductServiceMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProductService)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *ProductService) Get(arg0 context.Context, arg1 string) (*products.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*products.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ProductServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProductService)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *ProductService) Insert(arg0 context.Context, arg1 products.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *ProductServiceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*ProductService)(nil).Insert), arg0, arg1)
}

// Update mocks base method.
func (m *ProductService) Update(arg0 context.Context, arg1 products.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *ProductServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProductService)(nil).Update), arg0, arg1)
}
